---
import Navbar from "../components/Navbar.astro"
import Footer from "../components/Footer.astro"
import Subscribe from "../components/Subscribe.astro"

const defaultTitle = "Favour Felix ‚Äî Entrepreneur, Software Engineer"
const defaultDescription =
  "I am crafting a future I can be proud of and, I honestly can‚Äôt keep it to myself. I am a tech entrepreneur at Revaise and a software engineer at Acumen."
const defaultImage =
  "https://firebasestorage.googleapis.com/v0/b/favour-portfolio.appspot.com/o/og-home.png?alt=media&token=73ed34b0-0fc4-47c7-b334-e810dbdab520"
const defaultType = "website"

export interface Props {
  favicon: string
  title: string
  description: string
  img: string
  type: string
  readTime: string
  publishedDate: string
  lastUpdated: string
}

const {
  title,
  description,
  img,
  type,
  readTime,
  publishedDate,
  lastUpdated,
  favicon,
} = Astro.props
---

<!DOCTYPE html>
<html dir="auto" lang="en" class="initial">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href={favicon || "/favicon.svg"} />
    <meta name="keywords" content="" />
    <meta name="title" content={title || defaultTitle} />
    <meta name="description" content={description || defaultDescription} />
    <meta name="og:title" content={title || defaultTitle} />
    <meta name="og:description" content={description || defaultDescription} />
    <meta name="og:image" content={img || defaultImage} />
    <meta name="og:type" content={type || defaultType} />
    <meta name="og:site_name" content={defaultTitle} />
    <meta name="og:url" content="https://favourfelix.com" />
    <meta name="twitter:card" content="" />
    <meta name="twitter:title" content={title || defaultTitle} />
    <meta
      name="twitter:description"
      content={description || defaultDescription}
    />
    <meta name="author" content="Favour Felix" />
    <meta
      name="article:publisher"
      content={type === "article" ? "Favour Felix" : ""}
    />
    <meta
      name="article:published_time"
      content={type === "article" ? publishedDate : ""}
    />
    <meta
      name="article:modified_time"
      content={type === "article" ? lastUpdated : ""}
    />
    <meta
      name="twitter:label1"
      content={type === "article" ? "Written by" : ""}
    />
    <meta
      name="twitter:data1"
      content={type === "article" ? "Favour Felix" : ""}
    />
    <meta
      name="twitter:label2"
      content={type === "article" ? "Est. reading time" : ""}
    />
    <meta name="twitter:data2" content={type === "article" ? readTime : ""} />
    <meta name="twitter:site" content="" />
    <meta name="twitter:creator" content="" />
    <title>{title}</title>
  </head>
  <body>
    <Navbar />
    <slot />
    <Footer />
    <div class="front-row-ctn section">
      <div class="inner">
        <Subscribe />
      </div>
    </div>
    <div class="front-row-btn-ctn section">
      <div class="inner">
        <button class="front-row-btn"> Front-row Seat üëãüèø</button>
      </div>
    </div>
    <script></script>
  </body>
</html>

<script>
  const body = document.querySelector("body")
  const lightIcon = document.querySelector("#light-svg")
  const darkIcon = document.querySelector("#dark-svg")

  // DARK MODE LOGIC
  if (
    window.matchMedia &&
    window.matchMedia("(prefers-color-scheme: dark)").matches
  ) {
    body?.classList.add("dark")
    lightIcon?.classList.remove("hidden")
    darkIcon?.classList.add("hidden")
  }
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (event) => {
      const newColorScheme = event.matches ? "dark" : "light"
      if (newColorScheme === "dark") {
        body?.classList.add("dark")
        lightIcon?.classList.remove("hidden")
        darkIcon?.classList.add("hidden")
      } else {
        body?.classList.remove("dark")
        lightIcon?.classList.add("hidden")
        darkIcon?.classList.remove("hidden")
      }
    })
  if (localStorage.getItem("theme") === "dark") {
    body?.classList.add("dark")
    lightIcon?.classList.remove("hidden")
    darkIcon?.classList.add("hidden")
  }

  // FRONT ROW SEAT MODAL TOGGLE
  const frontRowButton = document.querySelector(".front-row-btn")
  const frontRowForm = document.querySelector(".front-row-ctn")

  frontRowButton?.addEventListener("click", () => {
    if (frontRowForm?.classList.contains("come-up-1")) {
      frontRowForm?.classList.remove("come-up-1")
    } else {
      frontRowForm?.classList.add("come-up-1")
    }
  })
</script>

<!-- Google tag (gtag.js) -->
<script
  async
  defer
  src="https://www.googletagmanager.com/gtag/js?id=G-Y8YVRD558S"
></script>
<script is:inline>
  if (!location.host.includes("localhost")) {
    window.dataLayer = window.dataLayer || []
    function gtag() {
      dataLayer.push(arguments)
    }
    gtag("js", new Date())
    gtag("config", "G-Y8YVRD558S")
  }
</script>

<style is:global>
  @import url("https://fonts.googleapis.com/css2?family=IBM+Plex+Serif&family=Inter:wght@300;400;500;600&display=swap");

  * {
    margin: 0;
    box-sizing: border-box;
    scroll-behavior: smooth;
    font-family: "Inter", sans-serif;
  }
  :root {
    /* VIEWPORT SIZES */
    --desktop-width: 1200px;
    --modal-width: 480px;
    --header-height: 100px;

    /* HUES */
    --bg-light: #fff8ee;
    --primary: #ffab2d;
    --primary-dark: #de8500;
    --primary-deep-dark: #362000;

    /* DURATION */
    --anim-interval: 0.3s;
    --progress-interval: 0.4s;

    /* FONT SIZES */
    --header-font: 1.6rem;
    --normal-font: 1.1rem;
  }

  html {
    scroll-behavior: smooth;
  }
  body {
    background: var(--bg-light);
    padding-top: 100px;
    border: 0px !important;
  }
  ::selection {
    color: #000000;
    background: #de8500;
  }
  a {
    color: #000000;
  }
  svg,
  svg path {
    fill: var(--primary-deep-dark);
  }

  /* DARK MODE */
  body.dark {
    background: var(--primary-deep-dark);
    color: var(--bg-light);
  }
  body.dark .navbar-ctn {
    background: var(--primary-deep-dark);
    color: var(--bg-light);
  }
  body.dark a {
    color: var(--bg-light);
  }
  body.dark a:hover {
    color: var(--primary-dark);
  }
  body.dark .logo:hover {
    color: var(--bg-light);
  }
  body.dark svg,
  body.dark svg path {
    fill: var(--primary-deep-dark);
  }
  body.dark a {
    border-color: var(--bg-light);
  }
  body.dark .footer-ctn {
    border-color: #683f00;
  }
  body.dark .row > div:nth-child(1) {
    border-color: #683f00;
  }
  .hidden {
    display: none;
  }

  /*-----------
	BUTTONS 
	-------------*/
  button {
    cursor: pointer;
  }
  .primary-btn {
    border: none;
    background-color: var(--primary);
    text-decoration: none;
    color: var(--primary-dark);
    border-radius: 5px;
    cursor: pointer;
    outline: none;
    height: 60px;
    width: 100%;
    display: grid;
    place-items: center;
    font-size: 1rem;
    font-weight: 600;
    transition: 0.3s;
    -webkit-transition: 0.3s;
    -moz-transition: 0.3s;
    -ms-transition: 0.3s;
    -o-transition: 0.3s;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    -ms-border-radius: 5px;
    -o-border-radius: 5px;
  }
  .primary-btn:active {
    background-color: var(--primary-light);
  }

  /*-----------
	PAGE SECTIONS 
	-------------*/
  .section > .inner {
    max-width: var(--desktop-width);
    width: 100%;
    margin: auto;
  }
  .emphatic {
    color: var(--primary-dark);
  }
  .bold {
    font-weight: 600;
  }
  a:hover {
    color: var(--primary-dark);
  }
  .logo:hover {
    color: #000000;
  }

  /* ARTICLE STYLES */
  article {
    max-width: 850px;
    margin-right: auto;
    margin-left: auto;
    font-family: "IBM Plex Serif", sans-serif;
    font-size: 1.25rem;
    line-height: 2.5rem;
  }
  article p {
    font-family: "IBM Plex Serif", sans-serif;
    padding-bottom: 2rem;
    display: block;
  }
  article section {
    padding-bottom: 2rem;
    text-align: left;
    font-size: 2rem;
    color: var(--primary);
  }
  article section.first {
    padding-bottom: 1rem;
  }
  article em {
    font-family: "IBM Plex Serif", sans-serif;
  }
  article p > .major {
    font-size: 1.5rem;
    line-height: 3rem;
  }
  article a {
    font-family: "IBM Plex Serif", sans-serif;
    font-weight: 500;
    text-decoration: none;
    border-bottom: 1px solid;
  }
  article h1,
  article h2,
  article h3 {
    color: var(--primary-dark);
    font-weight: 600;
    margin-bottom: 0.5rem;
  }
  article img,
  article video,
  article iframe {
    width: 100%;
    margin: 0.5rem 0;
    border-radius: 1rem;
  }
  .astro-code {
    padding: 1rem 2rem;
    border-radius: 16px;
    margin-bottom: 2rem;
  }
  .astro-code * {
    font-family: monospace;
    font-size: 1rem;
    line-height: 1rem;
  }
  code {
    font-family: monospace;
    color: var(--primary);
  }
  article body {
  }
  article blockquote {
    font-size: 150%;
    line-height: 150%;
    border-left: 2px solid;
    padding-left: 2rem;
    margin-bottom: 2rem;
  }
  article blockquote p {
    padding-bottom: 0;
  }

  /* ARTICLE COLOR CODE */
  .technical {
    width: 12px;
    height: 12px;
    border-radius: 4px;
    background: var(--primary);
    display: inline-flex;
    margin-right: 8px;
    margin-top: 2px;
    transition: 0.3s;
    cursor: pointer;
  }
  .technical::after {
    content: "Technical Article";
    font-size: 0.8rem;
    display: block;
    position: relative;
    top: 24px;
    left: -10px;
    height: 18px;
    padding: 2px 8px;
    white-space: nowrap;
    background: var(--primary-dark);
    transition: 0.3s;
    border-radius: 6px;
    color: var(--primary-deep-dark);
    font-weight: 700;
    margin-top: -3px;
    transition: 0.3s;
    transform: translateY(10px) scale(0.8);
    opacity: 0;
    visibility: hidden;
    transform-origin: left;
  }
  .technical:hover::after {
    transform: translateY(0) scale(1);
    opacity: 1;
    visibility: visible;
  }

  /* MAILCHIMP FORM */
  .front-row-ctn,
  .front-row-btn-ctn {
    text-align: right;
    position: fixed;
    width: 100%;
    right: 0;
    left: 0;
    bottom: 0;
  }
  .front-row-ctn {
    visibility: hidden;
    opacity: 0;
    transform: translateY(10px) scale(0.8);
    transform-origin: bottom right;
    transition: 0.3s;
  }
  .front-row-btn-ctn .inner > button {
    background: var(--primary);
    outline: none;
    border: none;
    height: 50px;
    font-size: 1.1rem;
    padding: 0 2rem;
    border-top-right-radius: 14px;
    border-top-left-radius: 14px;
    font-weight: 600;
  }
  .front-row-ctn.come-up-1 {
    visibility: visible;
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  /* ----------
	MEDIA QUERIES
	------------*/
  @media screen and (max-width: 1500px) {
    .section > .inner {
      width: 80%;
    }
  }

  @media screen and (max-width: 1100px) {
    .section > .inner {
      width: 90%;
    }
  }

  @media screen and (max-width: 920px) {
  }

  @media screen and (max-width: 600px) {
    body {
      padding-top: 50px;
    }
    article {
      font-size: 1.05rem;
      line-height: 2.1rem;
    }
    article p {
      padding-bottom: 1.5rem;
    }
    article p > .major {
      font-size: 1.4rem;
    }
    article img,
    article video {
      border-radius: 0.5rem;
    }
    .astro-code {
      padding: 0.5rem 1rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
    }
    .front-row-ctn .inner > button {
      height: 40px;
      font-size: 0.9rem;
      padding: 0 1.3rem;
      border-top-right-radius: 14px;
      border-top-left-radius: 14px;
      font-weight: 600;
    }
    article blockquote {
      font-size: 120%;
      padding-left: 1rem;
      margin-bottom: 1.5rem;
    }
  }
</style>
